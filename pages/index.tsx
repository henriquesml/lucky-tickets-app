import Head from 'next/head'
import { useEffect, useState } from 'react'
import { useAddress, useContract, useContractRead, useContractWrite } from '@thirdweb-dev/react'
import Loading from '../components/Loading'
import Header from '../components/Header'
import MainContent from '../components/MainContent'

export default function Home() {
  const [userTickets, setUserTickets] = useState(0)
  const [totalWallets, setTotalWallets] = useState<string[]>([])

  const address = useAddress()
  const { contract, isLoading } = useContract("0xA6c548B9Db4D2bfa29E0d222f215AE78E3f2b464")
  const { data: lotteryOperator } = useContractRead(contract, "lotteryOperator")
  const { data: tickets } = useContractRead(contract, "getTickets")
  const { data: winnings } = useContractRead(contract, "getWinningsForAddress", address)
  const { data: currentWinningReward } = useContractRead(contract, "currentWinningReward")
  const { data: ticketPrice } = useContractRead(contract, "ticketPrice")
  const { data: expiration } = useContractRead(contract, "expiration")
  const { data: lastWinner } = useContractRead(contract, "lastWinner")
  const { data: lastWinnerAmount } = useContractRead(contract, "lastWinnerAmount")
  const { data: totalCommission } = useContractRead(contract, "operatorTotalCommission")
  const { mutateAsync: drawWinnerTicket } = useContractWrite(contract, "drawWinnerTicket")
  const { mutateAsync: withdrawCommission } = useContractWrite(contract, "withdrawCommission")
  const { mutateAsync: restartDraw } = useContractWrite(contract, "restartDraw")
  const { mutateAsync: withdrawWinnings} = useContractWrite(contract, "withdrawWinnings")
  const { mutateAsync: buyTickets} = useContractWrite(contract, "buyTickets")

  useEffect(() => {
    if(tickets) {
      const wallets: string[] = []
      const userTotalTickets = tickets.reduce((total: number, ticketAdress: string) => (ticketAdress === address ? total + 1 : total), 0)
      tickets.forEach((wallet: string) => {
        if(!wallets.includes(wallet)) {
          wallets.push(wallet)
        }
      })

      setUserTickets(userTotalTickets)
      setTotalWallets(wallets)
    }
  }, [tickets, address])

  if (isLoading) {
    return <Loading />
  }

  return (
    <>
      <Head>
        <title>Lucky Tickets</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header
        address={address}
        lotteryOperator={lotteryOperator}
        userTickets={userTickets}
        winnings={winnings}
        drawWinnerTicket={drawWinnerTicket}
        withdrawCommission={withdrawCommission}
        restartDraw={restartDraw}
        totalCommission={totalCommission}
        withdrawWinnings={withdrawWinnings}
        />
      <MainContent
        lotteryOperator={lotteryOperator}
        address={address}
        currentWinningReward={currentWinningReward}
        ticketPrice={ticketPrice}
        expiration={expiration}
        tickets={tickets}
        lastWinner={lastWinner}
        lastWinnerAmount={lastWinnerAmount}
        totalWallets={totalWallets}
        buyTickets={buyTickets}
      />
    </>
  )
}
